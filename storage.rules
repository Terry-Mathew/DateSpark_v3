rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Default: deny all access
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // User profile photos
    match /users/{userId}/photos/{photoId} {
      // Allow users to read and write only their own profile photos
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId && isValidImage();
    }
    
    // Profile analysis photos
    match /users/{userId}/profileAnalysis/{photoId} {
      // Allow users to read and write only their own profile analysis photos
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId && isValidImage();
    }
    
    // Conversation starters photos
    match /users/{userId}/conversationStarters/{photoId} {
      // Allow users to read and write only their own conversation starter photos
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId && isValidImage();
    }
    
    // Public photos can be read by any authenticated user but only written by the owner
    match /public/{userId}/{photoId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId && isValidImage();
    }
    
    // Function to validate image uploads
    function isValidImage() {
      // Check if the file is an image
      return request.resource.contentType.matches('image/.*')
          // Limit size to 5MB
          && request.resource.size < 5 * 1024 * 1024;
    }
  }
} 